% This is the code for HW2 - Problem 2
% By Nicholas Luis (PSU ID 930841391)

clear; clc; close all;

%% Part A (used matlab as a calculator)
% Constants
MU = 398600; % km^3 / s^2
PI = 3.141592654;

% Departure Orbit
r1 = 7000; % km
a1 = r1;
v1 = getVelo(r1, a1);

% Arrival Orbit
r2 = 70000; % km
a2 = r2;
v2 = getVelo(r2, a2);

% Transfer Orbit
delta_f = 180;
a_T = get_aMin(r1, r2, delta_f);
p_T = getPT(a_T, r1, r2, delta_f);
e_T = (p_T / r1) - 1;
v1T = getVelo(r1, a_T);
v2T = getVelo(r2, a_T);

% Plane change angles
delta_I1 = -20; % AKA alpha
delta_I2 = -20; % AKA beta
gamma1 = 0;
gamma1T = 0;
gamma2T = 0;
gamma2 = 0;

% Delta V
deltaV1 = getDeltaV(v1, v1T, delta_I1, gamma1, gamma1T);
deltaV2 = getDeltaV(v2, v2T, delta_I2, gamma2, gamma2T);

%% Part B
alphaVec = -50:3:50; % Creates a list of alpha values to iterate through (in degrees)
deltaV1List = zeros(size(alphaVec)); % vector to store the delta V1's as we iterate
deltaV2List = zeros(size(alphaVec)); % vector to store the delta V2's as we iterate
deltaVTotalList = zeros(size(alphaVec)); % vector to store the total delta V's as we iterate
for i=1 : length(alphaVec) % Iterates through each index
    deltaV1List(i) = getDeltaV(v1, v1T, alphaVec(i), gamma1, gamma1T);
    deltaV2List(i) = getDeltaV(v2, v2T, delta_I2, gamma2, gamma2T);
end

%% Functions
function aMinT = get_aMin(r1_in, r2_in, df) 
    % This function gets the semimajor axis of minimum energy transfer
    % orbit given r1, r2, and the change in f
    sqrtTerm = sqrt( r1_in^2 + r2_in^2 - 2*r1_in*r2_in*cosd(df) ) ;
    aMinT = 0.25 * (r1_in + r2_in + sqrtTerm);
end

function P_output = getPT(amin, r1_in, r2_in, df) 
    % This funcion gets the semilatus rectum of a transfer orbit given r1,
    % r2, and the change in f
    k = r1_in*r2_in*(1-cosd(df));
    m = r1_in*r2_in*(1+cosd(df));
    l = r1_in + r2_in;
    
    P_output = (k*m - 2*amin*k*l)  / (4*amin*m - 2*amin*l*l);

end

function velo = getVelo(r_input, a_input)
    % This function gets the velocity using energy given MU, r, and a
    MU = 398600; % km^3 / s^2

    velo = sqrt(2 * MU * ( (1/r_input)  - (1 / (2*a_input)) ) );
end

function dvelo = getDeltaV(vi, vf, dI, gami, gamf)
    dvelo = sqrt( vf^2 + vi^2 - 2*vi*vf*( cosd(gamf-gami) - (1-cosd(dI))*cos(gamf)*cos(gami) ) );
end